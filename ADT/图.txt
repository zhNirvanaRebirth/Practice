图
	深度优先搜索dfs
	广度优先搜索bfs
	最短路径dijkstra
	
	顶点vertex
	边edge
	顶点A与顶点B共享边，则他们相邻
	
	从顶点a到顶点b是否存在一条路径
	从顶点a到顶点b的最短路径
	
	数据成员
		顶点
		边
	操作
		有多少个顶点
		有多少边
		添加一个顶点
		添加一条边
		对于一个顶点，有多少邻居
		两个顶点是否直接相连
		
	矩阵图表示法
		缺点：
			内存浪费
			增加顶点操作时间复杂度高
			
	邻接列表图表示法
		array + list
			所有顶点用数组来存储
			每个顶点的邻居用列表/dictionary存储
			
	深度优先搜索dfs (O(v) + O(e))
		跟踪下一步搜索的位置：使用stack
		跟踪访问过的内容：使用hashset
		跟踪从开始到目前访问过的路径：hashtable
		DFS (to visit a vertex v)
			mark v as visited
			recursively visit all unmarked
				vertices w adjacent to v
		
		recursive:
		DFS(S, G, visited, parents):
			if S == G return;
			for each of S's neighbors, n, not in visited set
				add n to visited set
				add S as n's parent in parents map
				DFS(n, G, visited, parents)
			
		iterative:
		DFS(S, G):
			Initialize: stack, visited HashSet and parent HashMap
			push S onto the stack and add to visited
			while stack is not empty:
				pop node curr from top of stack
				if curr == G return parent map
				for each of curr's neighbors, n, not in visited set:
					add n to visited set
					add curr as n's parent in parent map
					push n onto the stack
					
	广度优先搜索bfs (O(v) + O(e))
		跟踪下一步搜索的位置：使用queue
		跟踪访问过的内容：使用hashset
		跟踪从开始到目前访问过的路径：hashtable
		
		BFS(S, G)
			Initialize: queue, visited HashSet and parent HashMap
			Enqueue S onto the queue and add to visited
			while queue is not empty:
				dequeue node curr from front of queue
				if curr == G return parent map
				for each of curr's neighbors, n, not in visited set:
					add n to visited set
					add curr as n's parent in parent map
					enqueue n onto the queue
					
	连通图
		从顶点v存在一条路径到顶点w，则顶点v与w是连通的，如果图中任意两点都是连通的，则该图是连通图
			initialize all vertices v as unmarked
			for each unmarked vertex v, run DFS to identify all vertices discovered as part of the same component
			
	最短路径
		单源最短路径（一个起点）
		Dijkstra's算法 (路径中有权重问题，BFS + heap)
			BFS：放入queue中的neighbors是没有筛选的
			Dijkstra：每次放入queue中的neighbors是筛选过的（针对没有访问过的neighbors，每次要放入queue之前选择一个局部最优解）
				具体实现：维持一个minheap/maxheap，每次向queue放入neighbor之前，将所有neighbors放入heap中，取heap中的最大或最小值，加入queue，然后从queue中取出元素n，找到其所有neighbors，再将这些neighbors放入之前的heap，再取最大或最小值放入queue，循环调用
				
				Dijkstra(S, G):
					initialize Priority queue(PQ), visited HashSet, parent HashMap, and distances to infinity
					Enqueue {S, 0} onto the PQ
					while PQ is not empty:
						dequeue node curr from from front of queue
						if (curr is not visited)
							add curr to visited set
							if curr == G return parent map
							for each of curr's neighbors, n, not in visited set:
								if path throught curr to n is shorter
									update n's distance
								enqueue(n, distance) into the PQ
								
				无法处理的问题：
					路径中有负数
					有圈，且圈中路径中有负数
					
				局限：
					只考虑了信号源（出发点）
					
		A*算法
			Dijkstra只考虑当前顶点到出发点的距离
			A*考虑当前点到出发点和当前点到终点的距离（估算值），二者之和再放入heap中
		
		茶水间
			在一栋楼中建立茶水间，使得建立茶水间的位置最优（最优是指对于楼中的员工到茶水间的距离和最短，并非在所有房间都存在员工，并且有的路径上有墙，不能通过）
			方法一：对每个可建立茶水间的位置，遍历（DFS）获得其到每个员工位置的路径之和，比较得出位置
			方法二：对每个员工遍历其到每个可建立茶水间的距离（维护一个二维数组），每次遍历下来都向这个二维数组对应位置加上当前距离，最终取值最小的位置

		数字华容道
			转化成空格的位置，然后找到空格从当前位置到最终位置的一条路径（DFS）
					
		迷宫
			第一题：给定一个矩阵，一个起点，一个终点，问从起点到终点是否存在一条通路
			第二题：给定一个矩阵，一个起点，一个终点，问从起点到终点是否存在一条通路，不是一步一步走，碰到墙才停止
			第三题：给定一个矩阵，一个起点，一个终点，问从起点到终点是否存在一条通路，存在找到最短路径，不是一步一步走，碰到墙才停止
			第四题：给定一个矩阵，一个起点，一个终点，问从起点到终点是否存在一条通路，存在就打印路径，不是一步一步走，碰到墙才停止
			
		Flood Fill
			给定一个矩阵，给定一个起点，将起点的neighbor，以及所有neighbor的neighbor中相同的值替换成目标值
			
		Friend circles
			给定一个矩阵，找出其中有多少个朋友圈（对称的n*n的矩阵， 对角线为1）
				每次访问过就将其对角线元素设置为0， 表示该元素认识之前的人
		
		Island
			给定一个矩阵，找出其中有多少个岛（不对称，m*n， 对每个元素进行dfs）
			
		max area of island
			给定一个矩阵，找出其中最大的岛
			
		员工的重要程度
			[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1
			编号，重要程度，小兵                      查询编号
			
		找二分图
			[[1,3],[0,2],[1,3],[0,2]]
			可以把顶点划分到两个图中，使每个顶点的neighbor都来自另一个图
			
		太平洋与大西洋
			给定矩阵，表示海拔高度，找到水流既可以到太平洋又可以到大西洋的点
			
			反向找点，对矩阵边缘点dfs
		
		Longest increasing path in a Matrix
			给定一个矩阵，找到一条最长路径，使得在路径中数字是递增的
			
			需要存储每个元素的最长路径，以供后续使用
			
		01 Matrix
			对矩阵中的任何点，找到离它最近的0的距离
			
			方法一：同样需要存储每个点距离
			方法二：动态规划，每个点的距离：d[i, j] = min(1 + min(d[i-1, j], d[i, j - 1]), 1 + min(d[i+1, j], d[i, j+1]))
			
		Accounts Merge
			账户合并
			
		word ladder
			给定一个字典（字典中有很多单词），一个起点单词，一个终点单词，找到一个从起点单词转化成终点单词，每次转化只能转化一个字母，且转化后的单词依然存在字典中
			
			难道就是找到neighbors
			
		拓扑排序
			incoming edge + heap