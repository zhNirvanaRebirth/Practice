View绘制流程
	measure -> layout -> draw
	
Android四大组建之间的关系，并说说MVC设计模式
	延伸：
		Activity与Fragment生命周期，数据交互
		Activity与Service，数据交互
		BroadcastReceiver
		ContentProvider，数据存储，底层原理，Binder机制
		MVC，MVP， MVVM
		
StringBuilder，StringBuffer，String的关系与区别
	同步异步
	String底层实现

java GC算法
	内存泄漏，GC算法
	
Handler机制

设计模式
	
ANR具体产生的类型及对应的最大超时时间
	基于消息处理机制，核心原理是消息调度和超时处理
	分类
		Service Timeout：20秒 使用Handler和Looper，实现在java层
		BroadcastQueue Timeout
		ContentProvider Timeout
		inputDispatching Timeout：5秒 	InputReader（原始事件的读取加工） -> InputDispatcher（输入事件的派发） -> 窗口事件接收线程的Looper（输入事件的发送） -> 窗口事件处理函数（接收与反馈）
										
		
		
Activity启动过程
	ActivityManagerService
		系统服务
		运行在单独的进程
		扮演Binder进程间通信机制中的Server角色
		启动并管理Activity和Service
		启动过程
			ActivityManagerService.main (创建一个ActivityManagetService实例)
			ActivityManagerService.setSystemProcess (把Binder实例添加到Binder进程间通信机制的守护进程ServiceManager中去)
		
	Launcher/Activity启动Activity过程（ActivityManagerService和ActivityStack位于同一进程， ApplicationThread和ActivityThread位于另一个进程）
		通过Binder进程间通信进入到ActivityManagerService进程中，并调用ActivityManagerService.startActivity接口
		ActivityManagerService调用ActivityStack.startActivityMayWait来准备要启动的Activity的相关信息
		ActivityStack通知ApplicationThread要进行Activity启动的调度了，这里的ApplicationThread代表调用ActivityManagerService.startActivity接口的进程，即Launcher或Activity所在进程
		ApplicationThread不执行真正的启动操作，它通过调用ActivityManagerService.activityPaused接口进入ActivityManagerService进程中，看是否需要创建新的进程来启动Activity
		若是Launcher启动Activity，则调用ActivityManagerService.startProcessLocked来创建一个新的进程
		ActivityManagerService调用ApplicationThread.scheduleLaunchActivity接口，通知响应的进程执行启动Activity的操作
		ApplicationThread把这个启动Activity的操作发送给ActivityThread，ActivityThread通过ClassLoader来载入相应的Activity类，然后把它启动起来
		
		
	Launcher启动MainActivity过程
		Launcher.startActivitySafely
		Activity.startActivity -> Activity.startActivityForResult
		ActivityThread.getApplicationThread  (ActivityThread代表应用程序主线程，ApplicationThread是一个Binder对象，ActivityManagerService使用它来和ActivityThread进行进程间通信)
		Instrumentation.execStartActivity
		ActivityManagerNative.getDefault (返回ActivityManagerService的远程接口，即ActivityManagerProxy)
		ActivityManagerProxy.startActivity
		ActivityManagerService.startActivity (上一步通过Binder驱动进入此步)
		ActivityStack.startActivityMayWait (解析获得MainActivity信息)
		ActivityStack.startActivityLocked
		ActivityStack.startActivityUncheckedLocked (获取Intent标志位/启动模式)
		ActivityStack.resumeTopActivityLocked
		ActivityStack.startPausingLocked
		ApplicationThradProxy.schedulePauseActivity
		ApplicationThrad.schedulePauseActivity
		ActivityThread.queueOrSendMessage
		H.handleMessage
		ActivityThread.handlePauseActivity
		ActivityManagerProxy.activityPaused
		ActivityManagerService.activityPaused
		ActivityStack.activityPaused
		ActivityStack.completePauseLocked
		ActivityStack.resumeTopActivityLocked
		ActivityStack.startSpecificActivityLocked
		ActivityManagerService.startProcessLocked (创建进程)
		ActivityThread.main  (进入新创建的进程)
		ActivityManagerProxy.attachApplication
		ActivityManagerService.attachApplication
		ActivityManagerService.attachApplicationLocked
		ActivityStack.realStartActivityLocked
		ApplicationThreadProxy.scheduleLaunchActivity
		ApplicationThread.scheduleLaunchActivity
		ActivityThread.queueOrSendMessage
		H.handleMessage
		ActivityThread.handleLaunchActivity
		ActivityThread.performLaunchActivity
		ClassLoader加载
		MainActivity.onCreate
		
	MainActivity启动SecondActivity过程
		Activity.startActivity -> Activity.startActivityForResult
		Instrumentation.execStartActivity
		ActivityManagerProxy.startActivity
		ActivityManagerService.startActivity
		ActivityStack.startActivityMayWait (解析获得MainActivity信息)
		ActivityStack.startActivityLocked
		ActivityStack.startActivityUncheckedLocked (获取Intent标志位/启动模式)
		Activity.resumeTopActivityLocked
		ActivityStack.startPausingLocked
		ApplicationThradProxy.schedulePauseActivity
		ApplicationThrad.schedulePauseActivity
		ActivityThread.queueOrSendMessage
		H.handleMessage
		ActivityThread.handlePauseActivity
		ActivityManagerProxy.activityPaused
		ActivityManagerService.activityPaused
		ActivityStack.activityPaused
		ActivityStack.completePauseLocked
		ActivityStack.resumeTopActivityLocked
		ActivityStack.startSpecificActivityLoacked
		ActivityStack.realStartActivityLocked
		ApplicationThreadProxy.scheduleLaunchActivity
		ApplicationThread.scheduleLaunchActivity
		ActivityThread.queueOrSendMessage
		H.handleMessage
		ActivityThread.handleLaunchActivity
		ActivityThread.performLaunchActivity
		ClassLoader加载
		SecondActivity.onCreate
		
	Service启动过程
		Activity.startService
		ContextImpl.startService
		ActivityManagerProxy.startService
		ActivityManagerService.startService
		ActivityManagerService.startServiceLocked (解析Service的intent-filter标签)
		ActivityManagerService.bringUpServiceLocked
		ActivityManagerService.startProcessLocked  (若Service配置了在新进程中启动)
		Process.start
			ActivityManagerService是通过Process.start函数来创建一个新的进程的，而Process.start函数会首先通过Socket连接到Zygote进程中，最终由Zygote进程来完成创建新的应用程序进程，而Process类是通过openZygoteSocketIfNeeded函数来连接到Zygote进程中的Socket的
		ActivityThread.main
		ActivityThread.attach
		ActivityManagerProxy.attachApplication
		ActivityManagerService.attachApplication
		ActivityManagerService.attachApplicationLocked
		ActivityManagerService.realStartServiceLocked
		ApplicationThradProxy.scheduleCreateService
		ApplicationThread.scheduleCreateService
		ActivityThread.queueOrSendMessage
		H.handleMessage
		ActivityThread.handleCreateService
		ClassLoader.loadClass
		Service.onCreate
		
	进程启动过程
		ActivityThread.main
			应用程序进程入口函数
			进程创建完成之后，应用程序框架层在此进程中将ActivityThread类加载进来，然后执行其main函数，这个main函数就是今年初执行消息循环的地方
			
		ActivityManagerService.startProcessLocked
		Process.start
		ProcessState::supportsProcesses (判断是否打开了/dev/binder设备文件)
		Process.startViaZygote
		Process.zygoteSendAndGetPid
		ZygoteInit.runSelectLoopMode
		ZygoteConnection.runOnce
		Zygote.forkAndSpecialize
		ZygoteConnection.handleChildProc
		RuntimeInit.zygoteInit
			RuntimeInit.zygoteInitNative (执行binder驱动程序的初始化工作)
			AppRuntime.onZygoteInit
			ProcessState.startThreadPool (启动线程池，用于和Binder驱动程序进行交互)
			ProcessState.spawnPooledThread (创建PoolThread线程类)
			PoolThread.threadLoop
			IPCThreadState.joinThreadPool (告诉Binder驱动，这条线程要进入循环了)
			IPCThreadState::talkWithDriver (与Binder进行交互，以获得Client的进程间调用)
			executeCommand(cmd) （获得Client进程间调用后，处理相关请求）
		RuntimeInit.invokeStaticMain
		ClassLoader.loadClass (加载ActivityThread到进程中， 然后执行其main函数)
		ActivityThread.main
		Looper.loop (进入消息循环)
		
	应用程序安装过程
			Android系统在启动过程中，会启动一个应用程序管理服务PackageManagerService,这个服务负责扫描系统中的特定目录，找到里面的应用程序文件（.apk），对这些文件进行解析，得到应用程序的相关信息
			应用程序管理服务PackageManagerService安装应用程序的过程，其实就是解析应用程序配置文件AndroidManifest.xml的过程，从里面得到应用程序的相关信息（Activity, Service, BroadcastReceiver, ContentProvider）,有了这些信息，通过ActivityManagerService服务，就可以正常使用应用程序了
			
			PackageManagerService
				系统服务
				在系统启动时由SystemServer启动
		
			SystemServer.main （进行一些系统初始化工作）
			SystemServer.init1
			libsystem_server.system_init (初始化SurfaceFlinger, SensorService, AudioFlinger, MediaPlaayerService, CameraService, AudioPolicyService)
			AndroidRuntime.callStatic
			SystemServer.init2 (创建ServerThread线程，在这个线程中启动PackageManagerService服务)
			ServerThread.run (这个线程中会启动PackageManagerService, ActivityManagerService等服务)
			PackageManagerService.main (创建PackageManagerService实例，并把这个服务添加到ServiceManager中, 构造实例时，开始执行安装程序过程)
			PackageManagerService.scanDirLI (扫描设备上一下目录的apk文件：/system/framework, /system/app, /vendor/app, /data/app, /data/app-private)
			PackageManagerService.scanPackageLI (对找到的apk文件进行解析和安装)
			PackageParser.parsePackage   (apk解析：Androidmanifest.xml的解析)
			PackageManagerService.scanPackageLI (另一版本的scanPackageLI函数，用户保存解析出来的信息，此时，应用程序相关的package, activity, service, provider, receiver就被保存在PackageManagerService服务中了)
			
	Launcher启动过程
		Launcher是由ActivityManagerService启动的
		Launcher启动时会通过PackageManagerService把系统中已经安装好的应用程序以快捷图标的形势展示在桌面上
		
		SystemServer.main
		SystemServer.init1
		libsystem_server.system_init
		AndroidRuntime.callStatic
		SystemServer.init2
		ServerThread.run
		ActivityManagerService.main
		PackageManagerService.main
		ActivityManagerService.setSystemProcess (1、将ActivityManagerService实例添加到ServiceManager中托管，后期使用ServiceManager.getService就可以获得ActivityManagerService实例；2、将应用程序框架层下的android包加载进来；3、初始化ActivityThread类型的实例变量)
		ActivityManagerService.systemReady
		ActivityStack.resumeTopActivityLocked
		ActivityManagerService.startHomeActivityLocked (向PackageManagerService中查询Category类型为HOME的activity)
		ActivityStack.startActivityLocked
		...(与上面activity启动过程相同)
		Launcher.onCreate
		LauncherModel.startLoader
		LoaderTask.run
		LoaderTask.loadAndBindAllApps
		LoaderTask.loadAllAppsByBatch
		PackageManagerService.queryIntentActivities (查询Action类型为Intent.ACTION_MAIN, Category类型为Intent.CATEGORY_LAUNCHER的activity)
		Launcher.bindAllApplications
		AllApps2D.setApps (为每个应用程序创建一个ApplicationInfo实例，然后列表显示)
		
	系统进程Zygote启动过程
		Android中的所有应用程序进程以及系统服务进程SystemServer都是用Zygote进程fork出来的
		Android是基于Linux内核的，Linux中的所有进程都是init进程的子进程
		
		app_process.main (创建一个AppRuntime变量并调用其start函数)
		AnroidRuntime.start (启动Android系统运行时库：调用startVM启动虚拟机，调用startReg注册JNI方法，调用ZygoteInit.main)
		ZygoteInit.main (1、调用registerZygoteSocket创建socket接口，用了和ActivityManagerService通信；2、调用startSystemServer启动SystemServer；3、调用runSelectLoopMode进入无限循环，在创建的socket接口上等待ActivityManagerService请求创建新的应用程序进程)
		ZygoteInit.registerZygoteSocket
		ZygoteInit.startSystemServer (创建一个新的进程来启动SystemServer组件)
		ZygoteInit.handleSystemServerProcess
		RuntimeInit.zygoteInit
		RuntimeInit.zygoteInitNative (执行Binder进程间通信机制的初始化工作)
		SystemServer.main (会调用SystemServer.init1, SystemServer.init2执行相关的初始化工作及启动PackageManagerService和ActivityManagerService等服务)
		ZygoteInit.runSelectLoopMode (等待ActivityManagerService来链接这个Socket，然后调用ZygoteConnection.runOnce来创建新的应用程序)
		
		
Binder机制 
	不同进程之间的通信（IPC）
	提供远程过程调用（RPC）功能
	Client，Server，ServiceManager运行在用户空间
	Binder驱动程序运行在内核空间
	Binder通信机制使用句柄来代表远程接口
	
	ServiceManager
		是整个Binder机制的守护进程，用来管理开发者创建的各种Server，并向Client提供查询Server远程接口的功能
		
		service_manager.c main (1、打开Binder设备文件；2、告诉binder驱动程序自己是Binder上下文管理者，即守护进程；3、进入无限循环，充当Server角色，其句柄值为0，等待Client请求)
		binder.c binder_open （打开Binder设备文件/dev/binder）	
		binder.c binder_init
		binder驱动程序 binder_open (创建一个struct binder_proc数据结构来保存打开设备文件/dev/binder的进程上下文信息， 并且将这些信息保存在打开文件结构struct file的私有数据成员遍历private_data中，这个进程上下文信息同时还会保存在一个全局哈希表binder_procs中，驱动程序内部使用)
									binder_proc中就保存了那四个红黑树
										strcut rb_root threads:用于保存binder_proc进程内用于处理用户请求的线程
										struct rb_root nodes：用来保存binder_proc进程内的Binder实体
										struct rb_root refs_by_desc：用来保存binder_proc进程内Binder的引用，即引用其他进程的Binder实体，以句柄值作为key
										struct rb_root refs_by_node：用来保存binder_proc进程内Binder的引用，即引用其他进程的Binder实体，以实体节点作为key
		binder驱动程序 binder_mmap (对打开的设备文件进行内存映射操作，映射时使用进程虚拟地址空间vm_area_struct和内核虚拟地址空间vm_struct来映射同一物理页面，这样能减少数据从Client进程空间到Server进程空间的拷贝次数)
		binder.c binder_become_context_manager (通知Binder驱动程序自己是Binder机制的上下文管理者)
		binder驱动程序 binder_ioctl
									相关变量：
										struct binder_thread
											执行binder_become_context_manager的线程
											其成员变量rb_node对应binder_proc中threads树中的一个节点
										struct binder_node 
											表示一个Binder实体
		binder驱动程序 binder_new_node （创建Binder实体,在binder_proc中查询，有就不创建，没有就创建，并插入到binder_proc的nodes树中）
		binder.c binder_loop 
		binder驱动程序 binder_ioctl
		
	Server/Client获得ServerManager接口
		Client想要获得Server远程接口，必须通过ServiceManager远程接口提供的getService接口来获得
		Client获得ServiceManager远程接口不需要通过进程间通信来获得，因为ServiceManager远程接口是一个特殊的Binder引用，其引用句柄一定是0
		
		IServiceManager.cpp defaultServiceManager (获得ServiceManager远程接口BpServiceManager， 本质是一个句柄值为0的Binder引用)
			获取了ServiceManager的远程接口之后
				Server：
					IServiceManager::addService
					BpServiceManager::addService (调用基类BpRefBase的成员函数remote获得原先创建的BpBinder实例)
					BpBinder::transact
					IPCThreadState::transact (IPCThreadState中有一个ProcessState类型的成员变量mProcess，mProcess中有一个成员变量mDriverFD，他是设备文件.dev/binder的打开文件描述符，这样，IPCThreadState就可以和Binder驱动程序交互了)
					
				Client：
					IServiceManager::getService
					下同Server
					
	Binder中的Server启动过程
		Server通过defaultServiceManager函数获得ServiceManager远程接口之后，就要把自己的Service添加到ServiceManager中去，然后把自己启动起来，等待Client的请求
		
		启动并获取全局唯一的ProcessState实例
			open_driver (同ServiceManager，打开Binder设备文件/dev/binder， 并将打开设备文件描述符保存在成员变量mDriverFD中, 打开/dev/binder设备文件后，**Binder驱动程序就为响应的Server进程创建一个struct binder_proc结构体来维护其进程上下文信息**）
			mmap （把设备文件/dev/binder映射到内存中）
		defaultServiceManager().addService() （调用defaultServiceManager获取ServiceManager远程接口，将server添加到ServiceManager中）
		BpServiceManager::addService  (这里会传输一个本地binder实体， 通过remote函数返回一个BpBinder指针)
		BpBinder::transact 
		IPCThreadState::transact (执行实际的操作，通过mProcess变量，ProcessState中的mDriverFD)
		IPCThreadState::talkWithDriver
			操作完成，ServiceManager就要引用这个Server了
		ServiceManager被唤醒，进入while循环开始处理事务
		binder_parse  (获取传输的binder实体)
		do_add_service (将Server的binder实体写到一个struct svcinfo结构体中，包含名称和句柄值，然后插入到链接svclist的头部去，之后Client向ServiceManager查询服务接口时，只有给定服务名称，ServiceManager就能返回响应的句柄值了)
		
	Binder中的Client获取Server远程接口过程
		Client通过defaultServiceManager函数获得ServiceManager远程接口之后，通过ServiceManager的getService接口获得Server远程接口
		Client获取Server远程接口的本质就是从ServiceManager中获取该Server的句柄值
		
		defaultServiceManager()
		BpServiceManager::getService()
		BpBinder::transact
		IPCThreadState::transact
		IPCThreadState::talkWithDriver
		ServiceManager被唤醒，进入while循环开始处理事务
		binder_parse  (获取传输的binder实体)
		svcmgr_handler
		do_find_service
		find_svc
			client获取到了server远程接口，就可以使用server的服务了
			
	binder机制在应用程序框架层的Java接口
		应用程序框架层中基于java语言的Binder接口是通过JNI来调用基于c/c++语言的Binder运行库来为java应用程序提供进程间通信服务的
		在应用程序中
			Server：
				以Service形式实现
				通过IServiceManager.addService接口将这个Service添加到ServiceManager中
			Client：
				通过IServiceManager.getService接口来获取Service接口，以使用Service提供的功能
				
		获取ServiceManager的java远程接口ServiceManagerProxy
			ServiceManagerProxy实现了IServiceManager， IServiceManager提供了getServicehe和addService方法，构造ServiceManagerProxy需要一个BinderProxy对象，BinderProxy实现了IBinder接口，获取的BinderProxy持有句柄值为0的BpBinder
			
		Service接口定义
			编写aidl文件，编译之后，获得IXXXService.Stub类和IXXXService.Stub.Proxy类， IXXXService.Stub继承Binder
			
		Service启动过程
			SystemServer在系统启动时创建，创建时会开启一个线程创建Service，并将其加入到ServiceManager中
		
		Client获取Service的java远程接口过程
			调用IXXXService.Stub.asInterface   获取IXXXService
			
		Client调用Service远程接口提供的服务
		
MultiDex
	为什么要分包
	怎么分包
	分包之后怎么使用（怎么合）
	
	apk文件：AndroidManifest.xml， R， resource.arcs(资源索引)，assets, lib, classed.dex
	
	为什么分包：Android内部使用short int来存储方法数，当一个dex的方法超过65535就会抛异常
	