OSI体系结构
	应用层-表示层-会话层-运输层-网络层-数据链路层-物理层
TCP/IP体系结构
	应用层-传输层-网际层-网络接口层
五层协议体系结构
	应用层-传输层-网络层-数据链路层-物理层
	
应用层协议
	定义应用进程间的通信和交互的规则，应用层交互的数据单元称为报文  （报文）
运输层
	负责向两台主机进程之间的通信提供通用的数据传输服务
	运输层协议
		传输控制协议TCP：面向连接，可靠的数据传输服务
		用户数据协议UDP：面向无连接，不保证数据传输的可靠性
网络层
	负责选择合适的网间路由和交换节点，确保数据及时传送  （IP数据报）
数据链路层
	将网络层交下来的IP数据报组装成帧，在两个相邻节点间的链路上传送帧  （帧）
物理层
	实现相邻计算机节点之间的比特流的透明传送 （比特）
	
TCP三次握手和四次挥手
	三次握手
		发送方发送SYN标记数据包
		接收方发送SYN/ACK标记数据包
		发送方发送ACK标记数据包
	三次握手的原因：确保发送方与接收方建立可靠的通信信道
		第一次握手：发送方不能确认任何事情，接收方能确认对方发送正常
		第二次握手：发送方确认自己发送和接收正常，对方发送、接收，接收方确认自己发送和接收正常，对方发送正常
		第三次握手，发送方确认自己发送，接收正常，对方发送、接收正常，接收方确认自己发送、接收正常，对方发送，接收正常
	四次挥手
		发送方发送一个FIN，关闭发送方到接收方的数据传送
		接收方收到一个FIN，发送一个ACK（就是FIN+1）
		接收方关闭接收方到发送方的数据传递，发送一个FIN给发送方
		发送方发送ACK（就是接收方的FIN+1）
	四次挥手的原因：任何一方发出链接释放的通知，待对方确认后进入半关闭状态，当另一边也没有数据发送，且发出链接释放通知后，才关闭TCP连接
	
UDP和TCP
	应用场景
		UDP：QQ语音，QQ视频，直播等
		TCP：文件传输，邮件发送，远程登录等
		
TCP保证可靠传输
	应用数据被分割成TCP认为最适合发送的数据块
	TCP给每个发送的包进行编号，接收方对数据包进行排序，把有序数据传送给应用层
	校验和：TCP保持首部和数据的校验和以检测在传输过程中的任何变化，若有差错，则丢弃和不确认此报文
	TCP接收方会丢弃重复的数据
	流量控制：使用可变大小的滑动窗口协议保存一个缓冲空间，接收方只允许发送方发送接收方缓冲区能接受的数据，否则，提示发送方降低发送速率，防止包丢失
	拥塞控制：当网络拥塞时，减少数据的发送
	ARQ（Automatic Repeat-reQuest）协议：每发送完一个分组就停止发送，等待对方确认后再发送下一个分组
	超时重传：当发出一个段后，超时没有收到确认就重发这个报文段
	
ARQ协议
	如果发送方发送数据后一段时间没有收到确认帧，则重新发送
	停止等待ARQ协议
		发送数据经过一段时间没有收到ACK确认，则重新发送，直到收到确认后再发送下一分组
	连续ARQ协议
		可连续发送分组，不需要对方确认，接收方采用累积确认，对按序到达的最后一个分组发送确认，表明这个分组位置的所有分组都正确收到了
		
用户状态保存
	Session：通过服务器记录用户的状态
	Cookie：附加一个Session ID来跟踪Session，保存用户信息（用于客户端）
	
HTTP与HTTPS
	HTTP：默认端口80，传输的内容是明文，运行在TCP协议上，客户端和服务器都无法验证对方身份
	HTTPS：默认端口443，运行在SSL/TLS之上的HTTP协议，SSL/TLS运行在TCP之上，所有内容都经过对称加密传输（对称加密的密钥使用的是非对称加密）
		对称加密：密钥只有一个，加密和解密使用同一个密钥，速度快，加密算法DES，AES等
		非对称加密：密钥成对出现（无法根据私钥推算公钥，无法根据公钥推算私钥），公钥加密需要私钥解密，私钥加密需要公钥解密，加密算法RSA，DSA等
SSL与TLS
	SSL：Secure Socket Layer,安全套接字层
	TLS：Transport Layer Security,传输层安全
		传输内容加密
		服务端身份认证
		服务器端证书验证过程：（前提，客户端提前获得了三方机构的公钥，利用该公钥解密三方机构的证书，获取证书中的信息）
			client：发送随机数A及支持的加密套件
			server：接收随机数A，生成随机数B，发送随机数B及选择的加密套件
			server：发送服务端证书C（三方机构提供的，保存着证书所有者的基本信息，证书过期时间，所有者的公钥和数字签名）
			client：生成随机数C，根据证书加密C，发送加密后的证书C1
			client：根据A、B、C，计算出协商密钥D及加密算法E，发送D、E
			client：根据D、E将之前的所有通信参数的hash值生成密文F，发送F
			server：根据证书配套的密钥解密C1得到C，再根据A、B、C计算出协商密钥D和加密算法E，根据D、E将之前所有通信参数的hash值生成密文F1，比较F和F1，发送采用的协商密钥和协商算法
			server：根据D、E将之前的所有参数的hash值生成密文F2，发送F2
			client：根据D、E解密F2，比较F与F2，握手完成