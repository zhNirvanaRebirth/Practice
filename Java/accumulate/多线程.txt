多线程与安全问题
	进程与线程
		进程：运行中的程序
		线程：与进程相似的执行单元，一个进程在执行过程中可以产生多个线程
		多个线程共有进程的堆和方法区，每个线程有自己的jvm栈、本地方法栈、程序计数器
		
	程序计数器的作用
		字节码解释器通过改变程序计数器来依次读取指令，从而实现代码流程控制
		在多线程的情况下，程序计数器用于记录当前线程执行的位置，在线程切换回来时恢复至上次执行位置
	
	jvm栈
		每个方法执行会创建一个帧栈，用于存储本地变量表，操作数栈，常量池引用信息，每次方法调用到执行完毕，就对应一个帧栈的入栈和出栈
		
	线程的状态
		new
		runnable
		blocked
		waiting
		time_waiting
		terminated
		
	synchronized
		修饰实例方法（实例加锁）
		修饰静态方法（对象加锁）
		修饰代码块（对象加锁）
		
	synchronized底层原理
		修饰代码块
			使用的是锁监视器(monitorenter, monitorexit)
		修饰方法
			使用的是ACC_SYNCHRONIZED标记
	
	synchronized底层优化
		JDK1.6之前：synchronized属于重量级锁，效率低下（监视器锁monitor依赖底层操作系统的Mutex Lock来实现，java的线程是映射到操作系统的原生线程之上的，如果要挂起或者唤醒一个线程，都需要操作系统来帮忙完成，而操作系统实现线程之前的切换需要从用户态转换到内核态，这个状态之间的转换是非常耗时的）
		锁的四种状态
			偏向锁
				在没有多线程竞争的情况下，减少重量锁使用操作系统互斥量产生的性能消耗
				在没有竞争的情况下会把整个同步消除掉
				在竞争激烈的情况下，偏向锁会膨胀未轻量级锁
			轻量级锁
				在没有多线程竞争的情况下，减少重量锁使用操作系统互斥量产生的性能消耗
				在没有竞争的情况下，使用CAS操作，避免使用互斥操作的开销
				在竞争激烈的情况下，轻量级锁会膨胀未重量级锁
			自旋锁和自适应自旋锁
				一般线程持有锁的时间不会很长，这时去挂起、唤醒线程是得不偿失的（线程的挂起和唤醒操作涉及用户状态的切换）
				让一个线程执行一个忙循环
				自适应自旋锁：自旋的时间不固定
			锁消除
				虚拟机即时编译器（jit）字运行时，检测到共享数据不可能存在竞争，就将执行锁消除以节约请求锁的时间
			锁粗化
				如果一系列的操作对同一个对象反复进行加锁和解锁，就将这一系列操作只对该对象加锁解锁一次
			
	synchronized与ReenTrantLock
		两者都是可重入锁
			一个线程获取了某个对象的锁，这个线程可再次获取该对象的锁
		synchronized依赖于jvm，ReentrantLock依赖于API
		ReenTrantLock的一些高级功能
			等待可中断
			可实现公平锁（synchronized只能是非公平锁）
			可选择性通知
			
	volatile
		指示jvm所修饰变量是不稳定的，每次使用它都需要到主存中读取（共享内存 -> 工作内存）
		保证变量的可见性
		防止指令重排
		
	volatile与synchronized
		volatile是线程同步的轻量级实现，但只能修饰变量
		多线程访问volatile不会发生阻塞，而访问synchronized可能会发生阻塞
		volatile能保证数据的可见性，但不能保证数据的原子性，synchronized两者都能保证
		volatile用于保证多线程之间数据的可见性，而synchronized是解决多线程之间访问数据的同步性
		
		
	ThreadLocal
		每个线程存储自己的本地变量
		
	线程池
		优点
			降低资源消耗
			提高响应速度
			提高线程的可管理性
		分类
			FixedThreadPool
			SingleThreadExecutor
			CachedThreadPool
			ScheduleThreadPool
			
	Atomic
		利用CAS（compare and swap） + volatile + native来保证原子操作
		
	AQS（AbstractQueuedSynchronizer）
		用来构造锁和同步器的框架
		原理
			当被请求的资源空闲时，将当前请求资源的线程设置为有效的工作线程，并将共享资源设置为锁定状态
			如果共享资源被锁定，则使用CLH队列锁实现线程的阻塞和唤醒
		AQS使用一个int成员变量来表示同步状态，AQS使用CAS对该同步状态进行原子操作实现对其值得修改
		AQS对资源的共享方式
			Exclusive（独占）：只有一个线程能执行
			Share（共享）：多个线程可同时执行，如Semaphore,CountDownLatch,CyclicBarrier,ReadWriteLock
			
	ConcurrentHashMap
		线程安全的hashMap（读取操作几乎不加锁，写操作分段加锁）

	CopyOnWriteArrayList
		读取不加锁，写操作加锁（写操作创建底层数组副本）
		
	ConcurrentLinkedQueue
		通过CAS非阻塞算法实现线程安全
		
	BlockingQueue
		堵塞队列，常用于生产者-消费者问题中
		
	ConcurrentSkipMap
		空间换时间的map
		最底层的链表维护了跳表中的所有元素，没上面一层都是下面一层的子集
		查找时，从顶级链表开始，一旦发现查找元素大于当前链表节点取值，转入下一层继续找
		
	乐观锁与悲观锁
		乐观锁
			每次获取数据都认为别人不会修改，所有不会上锁，但是在更新的时候会判断在此期间是否有人更新这个数据（使用版本号机制和CAS实现），适用于读多于写操作
		悲观锁
			每次获取数据都认为别人会修改，所以每次都会上锁